# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\aless\Desktop\uiFILEs\PaginaProdotti.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import  mysql.connector

class Ui_PaginaProdotti(object):
    def setupUi(self, PaginaProdotti):
        PaginaProdotti.setObjectName("PaginaProdotti")
        PaginaProdotti.resize(840, 571)
        PaginaProdotti.setStyleSheet("background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiProdotto/SfondoProdotti.png);")
        self.TableProdototti = QtWidgets.QTableWidget(PaginaProdotti)
        self.TableProdototti.setGeometry(QtCore.QRect(100, 240, 641, 221))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TableProdototti.sizePolicy().hasHeightForWidth())
        self.TableProdototti.setSizePolicy(sizePolicy)
        self.TableProdototti.setStyleSheet(
                                           "background-color: rgb(122, 122, 122);\n"
                                           "alternate-background-color: rgb(218, 218, 218);\n"
                                           "background: none;\n"
                                           "border: 2px solid white;\n"
                                           "border-bottom-color: #20730b;\n"
                                           "td: 100px;\n"
                                           "\n"
                                           "")
        self.TableProdototti.setObjectName("TableProdototti")
        self.TableProdototti.setColumnCount(6)
        self.TableProdototti.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableProdototti.setHorizontalHeaderItem(5, item)
        self.TableProdototti.horizontalHeader().setDefaultSectionSize(125)
        self.ButtonCerca = QtWidgets.QPushButton(PaginaProdotti)
        self.ButtonCerca.setGeometry(QtCore.QRect(500, 160, 220, 40))
        self.ButtonCerca.setStyleSheet("background-position: center;\n"
                                       "background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiProdotto/ButtonCercaProdotti.png);\n"
                                       "border: 2px solid black;\n"
                                       "border-radius: 10px;\n"
                                       "border-color: #20730b;")
        self.ButtonCerca.setText("")
        self.ButtonCerca.setObjectName("ButtonCerca")
        self.ButtonHome = QtWidgets.QPushButton(PaginaProdotti)
        self.ButtonHome.setGeometry(QtCore.QRect(540, 500, 220, 40))
        self.ButtonHome.setStyleSheet("background-position: center;\n"
                                      "background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiProdotto/ButtonHome.png);\n"
                                      "border: 2px solid black;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: #20730b;")
        self.ButtonHome.setText("")
        self.ButtonHome.setObjectName("ButtonHome")
        self.lineEdit = QtWidgets.QLineEdit(PaginaProdotti)
        self.lineEdit.setGeometry(QtCore.QRect(100, 160, 381, 41))
        font = QtGui.QFont()
        font.setFamily("OpenSymbol")
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background: none;\n"
                                    "border: 2px solid black;\n"
                                    "border-radius: 5px;\n"
                                    "border-color: #20730b;\n"
                                    "text-align: center;")
        self.lineEdit.setObjectName("lineEdit")
        self.ButtonAggiungiSconto = QtWidgets.QPushButton(PaginaProdotti)
        self.ButtonAggiungiSconto.setGeometry(QtCore.QRect(40, 500, 220, 40))
        self.ButtonAggiungiSconto.setStyleSheet("background-position: center;\n"
                                                "background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiProdotto/ButtonAggiungiSconti.png);\n"
                                                "border: 2px solid black;\n"
                                                "border-radius: 10px;\n"
                                                "border-color: #20730b;")
        self.ButtonAggiungiSconto.setText("")
        self.ButtonAggiungiSconto.setObjectName("ButtonAggiungiSconto")

        self.TableProdototti.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.caricaDatiProdotti()
        self.ButtonCerca.clicked.connect(self.cercaDatiProdotto)
        self.IdentificatoreUtilizzatore = 0

        self.retranslateUi(PaginaProdotti)
        QtCore.QMetaObject.connectSlotsByName(PaginaProdotti)

    def retranslateUi(self, PaginaProdotti):
        _translate = QtCore.QCoreApplication.translate
        PaginaProdotti.setWindowTitle(_translate("PaginaProdotti", "Form"))
        item = self.TableProdototti.horizontalHeaderItem(0)
        item.setText(_translate("PaginaProdotti", "Codice Prodotto"))
        item = self.TableProdototti.horizontalHeaderItem(1)
        item.setText(_translate("PaginaProdotti", "Nome Prodotto"))
        item = self.TableProdototti.horizontalHeaderItem(2)
        item.setText(_translate("PaginaProdotti", "Prezzo Acquisto"))
        item = self.TableProdototti.horizontalHeaderItem(3)
        item.setText(_translate("PaginaProdotti", "Prezzo Vendita"))
        item = self.TableProdototti.horizontalHeaderItem(4)
        item.setText(_translate("PaginaProdotti", "Data Ultima Vendita"))
        item = self.TableProdototti.horizontalHeaderItem(5)
        item.setText(_translate("PaginaProdotti", "Percentuale Sconto"))

    def caricaDatiProdotti(self):   //CARICA I DATI DI UN PRODOTTO ( ID, NOME, PREZZO DI ACQUISTO, PREZZO DI VENDITA, DATA ULTIMA VENDITA, PERCENTUALE SCONTO) NEL DATABASE
        mydb = mysql.connector.connect(host="localhost", user="alessio", password="alessio", database="prova")
        mycursor = mydb.cursor()

        queryTableProdotti = "SELECT prodotto.IDProdotto, prodotto.NomeProdotto, prodotto.PrezzoAcquisto, prodotto.PrezzoVendita,prodotto.DataUltimaVendita, sconto.PercentualeSconto FROM prodotto INNER JOIN sconto ON prodotto.IDSconto = sconto.IDSconto"
        mycursor.execute(queryTableProdotti)
        risultatoQueryProdotti = mycursor.fetchall()
        rigaTabella = 0
        righeTotali = 0

        for row in risultatoQueryProdotti:
            righeTotali += 1

        self.TableProdototti.setRowCount(righeTotali)

        for row in risultatoQueryProdotti:
            self.TableProdototti.verticalHeader().setVisible(bool(0))
            self.TableProdototti.setItem(rigaTabella, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.TableProdototti.setItem(rigaTabella, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.TableProdototti.setItem(rigaTabella, 2, QtWidgets.QTableWidgetItem(str(row[2])))
            self.TableProdototti.setItem(rigaTabella, 3, QtWidgets.QTableWidgetItem(str(row[3])))
            self.TableProdototti.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(row[4])))
            self.TableProdototti.setItem(rigaTabella, 5, QtWidgets.QTableWidgetItem(str(row[5])))

            rigaTabella += 1

//CERCA I DATI DI UN PRODOTTO ALL'INTERNO DEL DATABASE CREATO IN PRECEDENZA
    def cercaDatiProdotto(self):   
        richiesta = self.lineEdit.text()
        mydb = mysql.connector.connect(host="localhost", user="alessio", password="alessio", database="prova")
        mycursor = mydb.cursor()

        queryTableProdotti = "SELECT prodotto.IDProdotto, prodotto.NomeProdotto, prodotto.PrezzoAcquisto, prodotto.PrezzoVendita,prodotto.DataUltimaVendita, sconto.PercentualeSconto FROM prodotto INNER JOIN sconto ON prodotto.IDSconto = sconto.IDSconto WHERE prodotto.IDProdotto = '" + richiesta + "' OR prodotto.NomeProdotto = '" + richiesta + "'"
        mycursor.execute(queryTableProdotti)
        risultatoQueryProdotti = mycursor.fetchall()
        rigaTabella = 0
        righeTotali = 0

        for row in risultatoQueryProdotti:
            righeTotali += 1

        self.TableProdototti.setRowCount(righeTotali)

        for row in risultatoQueryProdotti:
            self.TableProdototti.verticalHeader().setVisible(bool(0))
            self.TableProdototti.setItem(rigaTabella, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.TableProdototti.setItem(rigaTabella, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.TableProdototti.setItem(rigaTabella, 2, QtWidgets.QTableWidgetItem(str(row[2])))
            self.TableProdototti.setItem(rigaTabella, 3, QtWidgets.QTableWidgetItem(str(row[3])))
            self.TableProdototti.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(row[4])))
            self.TableProdototti.setItem(rigaTabella, 5, QtWidgets.QTableWidgetItem(str(row[5])))

            rigaTabella += 1

    def setIdentificatoreUtilizzatore(self, codiceUtilizzatore):
        self.IdentificatoreUtilizzatore = codiceUtilizzatore

        //VISUALIZZA I PERMESSI DELL'UTILIZZATORE E LI SETTA AL LIVELLO MEDIO O ALTO
    def controllaPermessiUtilizzatore(self):
        mydb = mysql.connector.connect(host="localhost", user="alessio", password="alessio", database="prova")
        mycursor = mydb.cursor()
        queryPermessiUtilizzatore = "SELECT utilizzatore.Permessi FROM utilizzatore WHERE utilizzatore.IDUtilizzatore = '" + str(self.IdentificatoreUtilizzatore) +"'"
        mycursor.execute(queryPermessiUtilizzatore)
        risultatoPermessiUtilizzatore = mycursor.fetchall()

        livelloPermessi = ''

        for row in risultatoPermessiUtilizzatore:
            livelloPermessi = str(row[0])

        if livelloPermessi == 'medium' or livelloPermessi == 'high' :
            return bool(1)
        else:
            return bool(0)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PaginaProdotti = QtWidgets.QWidget()
    ui = Ui_PaginaProdotti()
    ui.setupUi(PaginaProdotti)
    PaginaProdotti.show()
    sys.exit(app.exec_())
