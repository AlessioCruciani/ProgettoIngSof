# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\aless\Desktop\uiFILEs\PaginaMagazzino.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector

class Ui_PaginaMagazzino(object):
    def setupUi(self, PaginaMagazzino):
        PaginaMagazzino.setObjectName("PaginaMagazzino")
        PaginaMagazzino.resize(840, 571)
        PaginaMagazzino.setStyleSheet("background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiMagazzino/SfondoMagazzino.png);")
        self.TableMagazzino = QtWidgets.QTableWidget(PaginaMagazzino)
        self.TableMagazzino.setGeometry(QtCore.QRect(100, 240, 641, 221))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TableMagazzino.sizePolicy().hasHeightForWidth())
        self.TableMagazzino.setSizePolicy(sizePolicy)
        self.TableMagazzino.setStyleSheet(
"background-color: rgb(122, 122, 122);\n"
"alternate-background-color: rgb(218, 218, 218);\n"
"background: none;\n"
"border: 2px solid white;\n"
"border-bottom-color: #20730b;\n"
"td: 100px;\n"
"\n"
"")
        self.TableMagazzino.setObjectName("TableMagazzino")
        self.TableMagazzino.setColumnCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.TableMagazzino.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableMagazzino.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableMagazzino.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableMagazzino.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.TableMagazzino.setHorizontalHeaderItem(4, item)
        self.TableMagazzino.horizontalHeader().setDefaultSectionSize(125)
        self.ButtonCerca = QtWidgets.QPushButton(PaginaMagazzino)
        self.ButtonCerca.setGeometry(QtCore.QRect(500, 160, 220, 40))
        self.ButtonCerca.setStyleSheet("background-position: center;\n"
"background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiMagazzino/ButtonCercaProdotti.png);\n"
"border: 2px solid black;\n"
"border-radius: 10px;\n"
"border-color: #20730b;")
        self.ButtonCerca.setText("")
        self.ButtonCerca.setObjectName("ButtonCerca")
        self.ButtonHome = QtWidgets.QPushButton(PaginaMagazzino)
        self.ButtonHome.setGeometry(QtCore.QRect(540, 500, 220, 40))
        self.ButtonHome.setStyleSheet("background-position: center;\n"
"background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiMagazzino/ButtonHome.png);\n"
"border: 2px solid black;\n"
"border-radius: 10px;\n"
"border-color: #20730b;")
        self.ButtonHome.setText("")
        self.ButtonHome.setObjectName("ButtonHome")
        self.lineEdit = QtWidgets.QLineEdit(PaginaMagazzino)
        self.lineEdit.setGeometry(QtCore.QRect(100, 160, 381, 41))
        font = QtGui.QFont()
        font.setFamily("OpenSymbol")
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background: none;\n"
"border: 2px solid black;\n"
"border-radius: 5px;\n"
"border-color: #20730b;\n"
"text-align: center;")
        self.lineEdit.setObjectName("lineEdit")

        self.TableMagazzino.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)   //serve a non modificare i campi di una tabella 

        self.caricaDatiMagazzino()
        self.ButtonCerca.clicked.connect(self.cercaDatiMagazzino)

        self.retranslateUi(PaginaMagazzino)
        QtCore.QMetaObject.connectSlotsByName(PaginaMagazzino)    //carica i dati nella tabella

    def caricaDatiMagazzino(self):
        mydb = mysql.connector.connect(host="localhost",user="alessio",password="alessio",database="prova")

        mycursor = mydb.cursor()

        queryTableMagazzino = "SELECT prodotto.IDProdotto, prodotto.NomeProdotto, prodotto.PrezzoAcquisto, prodotto.PrezzoVendita, SUM(prodottoacquistato.QuantitaAcquistata) FROM ordine INNER JOIN (prodotto INNER JOIN prodottoacquistato ON prodotto.IDProdotto = prodottoacquistato.IDProdotto) ON ordine.IDOrdine = prodottoacquistato.IDOrdine WHERE ordine.Consegnato = 'true' GROUP BY IDProdotto"
        #queryTableMagazzino = "SELECT distinct prodotto.IDProdotto, prodotto.NomeProdotto, prodotto.PrezzoAcquisto, prodotto.PrezzoVendita, SUM(prodottoacquistato.QuantitaAcquistata) - (SELECT SUM(prodottovenduto.QuantitaVenduta) FROM prodottovenduto INNER JOIN prodotto ON prodottovenduto.IDProdotto = prodotto.IDProdotto) FROM ordine INNER JOIN (prodottoacquistato INNER JOIN prodotto ON prodottoacquistato.IDProdotto=prodotto.IDProdotto) ON ordine.IDOrdine = prodottoacquistato.IDOrdine WHERE ordine.Consegnato = 'true'"
        mycursor.execute(queryTableMagazzino)
        risultatoQueryMagazzino = mycursor.fetchall()
        rigaTabella = 0
        righeTotali = 0

        for row in risultatoQueryMagazzino:
            righeTotali += 1

        self.TableMagazzino.setRowCount(righeTotali)

        for row in risultatoQueryMagazzino:

            queryQuantitaVenduta = "SELECT SUM(prodottovenduto.QuantitaVenduta) FROM prodottovenduto WHERE prodottovenduto.IDProdotto = '" + str(row[0]) + "'"
            mycursor.execute(queryQuantitaVenduta)
            risultatoQueryQuantitaVenduta = mycursor.fetchall()

            quantitaVenduta = 0

            for riga in risultatoQueryQuantitaVenduta:
                quantitaVenduta = riga[0]


            if(quantitaVenduta!= None):
                quantitaResidua = int(row[4]) - int(quantitaVenduta)
                self.TableMagazzino.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(quantitaResidua)))
            else:
                quantitaResidua = int(row[4])
                self.TableMagazzino.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(quantitaResidua)))

            self.TableMagazzino.verticalHeader().setVisible(bool(0))
            self.TableMagazzino.setItem(rigaTabella, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.TableMagazzino.setItem(rigaTabella, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.TableMagazzino.setItem(rigaTabella, 2, QtWidgets.QTableWidgetItem(str(row[2])))
            self.TableMagazzino.setItem(rigaTabella, 3, QtWidgets.QTableWidgetItem(str(row[3])))
            #self.TableMagazzino.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(row[4])))

            rigaTabella += 1

    def cercaDatiMagazzino(self):     // CERCA NEL DATABASE I DATI DI UN PRODOTTO IN MAGAZZINO(ID, NOME, PREZZO DI ACQUISTO, PREZZO DI VENDITA)                                                                                      
        richiesta = self.lineEdit.text()
        mydb = mysql.connector.connect(host="localhost",user="alessio",password="alessio",database="prova")

        mycursor = mydb.cursor()
        queryRicercaProdotti = "SELECT prodotto.IDProdotto, prodotto.NomeProdotto, prodotto.PrezzoAcquisto, prodotto.PrezzoVendita, SUM(prodottoacquistato.QuantitaAcquistata)  FROM ordine INNER JOIN (prodotto INNER JOIN prodottoacquistato ON prodotto.IDProdotto = prodottoacquistato.IDProdotto) ON ordine.IDOrdine = prodottoacquistato.IDOrdine WHERE (ordine.Consegnato = 'true' AND prodotto.IDProdotto = '" + richiesta +"') OR (ordine.Consegnato = 'true' AND prodotto.NomeProdotto = '" + richiesta + "' ) GROUP BY prodotto.IDProdotto"

        mycursor.execute(queryRicercaProdotti)
        risultatoRicercaProdotti = mycursor.fetchall()

        rigaTabella = 0
        righeTotali = 0

        for row in risultatoRicercaProdotti:
            righeTotali += 1

        self.TableMagazzino.setRowCount(righeTotali)

        for row in risultatoRicercaProdotti:
            self.TableMagazzino.verticalHeader().setVisible(bool(0))
            self.TableMagazzino.setItem(rigaTabella, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.TableMagazzino.setItem(rigaTabella, 1, QtWidgets.QTableWidgetItem(str(row[1])))
            self.TableMagazzino.setItem(rigaTabella, 2, QtWidgets.QTableWidgetItem(str(row[2])))
            self.TableMagazzino.setItem(rigaTabella, 3, QtWidgets.QTableWidgetItem(str(row[3])))
            self.TableMagazzino.setItem(rigaTabella, 4, QtWidgets.QTableWidgetItem(str(row[4])))

            rigaTabella += 1

    def retranslateUi(self, PaginaMagazzino):
        _translate = QtCore.QCoreApplication.translate
        PaginaMagazzino.setWindowTitle(_translate("PaginaMagazzino", "Form"))
        item = self.TableMagazzino.horizontalHeaderItem(0)
        item.setText(_translate("PaginaMagazzino", "Codice Prodotto"))
        item = self.TableMagazzino.horizontalHeaderItem(1)
        item.setText(_translate("PaginaMagazzino", "Nome Prodotto"))
        item = self.TableMagazzino.horizontalHeaderItem(2)
        item.setText(_translate("PaginaMagazzino", "Prezzo Acquisto"))
        item = self.TableMagazzino.horizontalHeaderItem(3)
        item.setText(_translate("PaginaMagazzino", "Prezzo Vendita"))
        item = self.TableMagazzino.horizontalHeaderItem(4)
        item.setText(_translate("PaginaMagazzino", "Quantit√† Magazzino"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PaginaMagazzino = QtWidgets.QWidget()
    ui = Ui_PaginaMagazzino()
    ui.setupUi(PaginaMagazzino)
    PaginaMagazzino.show()
    sys.exit(app.exec_())
