# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\aless\Desktop\uiFILEs\PaginaStatistiche.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import matplotlib
from datetime import date
from matplotlib import pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationBar
import mysql.connector


class Ui_Statistiche(object):
    def setupUi(self, PaginaStatistiche):
        PaginaStatistiche.setObjectName("PaginaScontrini")
        PaginaStatistiche.resize(852, 568)
        PaginaStatistiche.setStyleSheet("background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiStatistiche/SfondoStatistiche);")
        self.ButtonHome = QtWidgets.QPushButton(PaginaStatistiche)
        self.ButtonHome.setGeometry(QtCore.QRect(540, 500, 220, 40))
        self.ButtonHome.setStyleSheet("background-position: center;\n"
"background-image: url(C:/Users/aless/Desktop/uiFILEs/ImmaginiStatistiche/ButtonHome.png);\n"
"border: 2px solid black;\n"
"border-radius: 10px;\n"
"border-color: #20730b;")
        self.ButtonHome.setText("")
        self.ButtonHome.setObjectName("ButtonHome")
        self.frame = QtWidgets.QFrame(PaginaStatistiche)
        self.frame.setGeometry(QtCore.QRect(60, 140, 341, 241))
        self.frame.setStyleSheet("border: 2px solid black;\n"
"border-radius: 10px;\n"
"border-color: #20730b;\n"
"background: white;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(PaginaStatistiche)
        self.frame_2.setGeometry(QtCore.QRect(440, 140, 341, 241))
        self.frame_2.setStyleSheet("border: 2px solid black;\n"
"border-radius: 10px;\n"
"border-color: #20730b;\n"
"background: white;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label = QtWidgets.QLabel(PaginaStatistiche)
        self.label.setGeometry(QtCore.QRect(60, 120, 341, 16))
        font = QtGui.QFont()
        font.setFamily("OpenSymbol")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("background: white;\n"
"color: #20730b;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(PaginaStatistiche)
        self.label_2.setGeometry(QtCore.QRect(440, 120, 341, 16))
        font = QtGui.QFont()
        font.setFamily("OpenSymbol")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background: white;\n"
"color: #20730b;")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")

        self.grafico1 = QtWidgets.QVBoxLayout(self.frame)
        self.grafico2 = QtWidgets.QVBoxLayout(self.frame_2)




        self.grafica = Canvas_grafica()
        self.grafica2 = Canvas_graficaBilancio()
        self.grafico1.addWidget(self.grafica)
        self.grafico2.addWidget(self.grafica2)

        self.retranslateUi(PaginaStatistiche)
        QtCore.QMetaObject.connectSlotsByName(PaginaStatistiche)



    def retranslateUi(self, PaginaStatistiche):
        _translate = QtCore.QCoreApplication.translate
        PaginaStatistiche.setWindowTitle(_translate("PaginaStatistiche", "Form"))
        self.label.setText(_translate("PaginaStatistiche", "PRODOTTI VENDUTI ULTIMI 7 GIORNI"))
        self.label_2.setText(_translate("PaginaStatistiche", "BILANCIO DEL MESE CORRENTE"))


class Canvas_grafica(FigureCanvas):
    def __init__(self, parent=None):
        self.fig, self.ax = plt.subplots(1, dpi=75, figsize=(5, 5), sharey=True, facecolor='white')
        super().__init__(self.fig)

        # nombres = ['15', '25', '30', '35', '40']
        nombres = self.vettoreDate()

        #tama = [10, 15, 20, 25, 50, 4, 55]
        tama = self.vettoreValori()

        # colores = ['red', 'red', 'red', 'red', 'red', 'red', 'blue']
        colores = self.vettoreColori(tama)


        self.ax.bar(nombres, tama, color=colores)
        #self.fig.suptitle('grafico a barre', size=9)



    def vettoreDate(self):
        # sarebbe nombres
        setteGiorni = []
        datadainserire = date.today() + datetime.timedelta(days=-6)
        setteGiorni.append(datadainserire.day)
        datadainserire = (date.today() + datetime.timedelta(days=-5))
        setteGiorni.append(datadainserire.day)
        datadainserire = (date.today() + datetime.timedelta(days=-4))
        setteGiorni.append(datadainserire.day)
        datadainserire = (date.today() + datetime.timedelta(days=-3))
        setteGiorni.append(datadainserire.day)
        datadainserire = (date.today() + datetime.timedelta(days=-2))
        setteGiorni.append(datadainserire.day)
        datadainserire = (date.today() + datetime.timedelta(days=-1))
        setteGiorni.append(datadainserire.day)
        datadainserire = date.today()
        setteGiorni.append(datadainserire.day)

        return setteGiorni

    def vettoreValori(self):
        mydb = mysql.connector.connect(host="localhost", user="alessio", password="alessio", database="prova")
        mycursor = mydb.cursor()
        setteValori = []
        for i in range (6, -1, -1):
            valore = -i
            dataquery = (date.today() + datetime.timedelta(days=valore)).isoformat()
            queryValore = "SELECT SUM(prodottovenduto.QuantitaVenduta) FROM prodottovenduto INNER JOIN vendita ON prodottovenduto.IDVendita=vendita.IDVendita WHERE vendita.DataVendita = '"+ dataquery +"'"
            mycursor.execute(queryValore)
            risultatoQueryValore = mycursor.fetchall()

            valore = None

            for row in risultatoQueryValore:
                valore = row[0]

            if valore == None:
                setteValori.append(0)
            else:
                setteValori.append(int(valore))
        return setteValori

    def vettoreColori(self, vettoreValori):
        vettoreColori = []
        for i in vettoreValori:
            if i >= 20:
                vettoreColori.append('green')
            elif (i<20 and i>=10):
                vettoreColori.append('yellow')
            else:
                vettoreColori.append('red')

        return vettoreColori


class Canvas_graficaBilancio(FigureCanvas):
    def __init__(self, parent=None):
        self.fig, self.ax = plt.subplots(1, dpi=75, figsize=(5, 5), facecolor='white')
        super().__init__(self.fig)



        self.ax.axes.plot(self.vettoreDate(), self.vettoreValori())


    def vettoreDate(self):
        # sarebbe nombres
        trentaGiorni = []

        giorni = int(date.today().day)

        for i in range(giorni-1, 0, -1):
            dataDaInserire = date.today() + datetime.timedelta(days=-(i))
            trentaGiorni.append(dataDaInserire.day)

        return trentaGiorni

    def vettoreValori(self):
        trentaValori =[]
        valoreVendite = 0
        valoreAcquisti = 0
        mydb = mysql.connector.connect(host="localhost", user="alessio", password="alessio", database="prova")
        mycursor = mydb.cursor()
        giorni = int(date.today().day)

        for i in range(giorni - 1, 0, -1):

            dataDaInserire = (date.today() + datetime.timedelta(days=-(i))).isoformat()
            queryVendite = "SELECT SUM(prodottovenduto.TotaleVendita) FROM vendita INNER JOIN prodottovenduto ON vendita.IDVendita = prodottovenduto.IDVendita WHERE vendita.DataVendita = '"+ dataDaInserire +"'"
            mycursor.execute(queryVendite)
            risultatoVendite = mycursor.fetchall()

            for row in risultatoVendite:
                if row[0] == None:
                    valoreVendite = 0
                else:
                    valoreVendite = row[0]

            queryAcquisti = "SELECT SUM(prodottoacquistato.TotaleAcquisto) FROM ordine INNER JOIN prodottoacquistato ON ordine.IDOrdine = prodottoacquistato.IDOrdine WHERE ordine.DataOrdine = '" + dataDaInserire + "'"
            mycursor.execute(queryAcquisti)
            risultatoAcquisti = mycursor.fetchall()

            for row in risultatoAcquisti:
                if row[0] == None:
                    valoreAcquisti = 0
                else:
                    valoreAcquisti = row[0]

            trentaValori.append(valoreVendite-valoreAcquisti)

        return trentaValori

    """def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(Canvas_graficaBilancio, self).__init__(fig)"""





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PaginaStatistiche = QtWidgets.QWidget()
    ui = Ui_Statistiche()
    ui.setupUi(PaginaStatistiche)
    PaginaStatistiche.show()
    sys.exit(app.exec_())
